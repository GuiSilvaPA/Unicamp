{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Aula 6 - Guilherme Pereira","provenance":[{"file_id":"1iCUWoyLkNU1-UmsB8YLfLvr3xwI04vIQ","timestamp":1632339045834},{"file_id":"1wpv_r96bBhIHJ3g9q3so3p8sHJ1HDk7H","timestamp":1631553851617},{"file_id":"1YW4O0K7EfSsgUe1kaZR9NswLXKVwqCb-","timestamp":1631389187602},{"file_id":"1Y3rRUiQGW5CEcPRkx_sfZGAEjNwVsw-b","timestamp":1631184728325},{"file_id":"1ONeS-lZ3vVqThueoTvQRMnZ_rJJB1yOl","timestamp":1629906878859}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"1OG5DT_dm6mk"},"source":["# Notebook de referência \n","\n","Nome: Guilherme Pereira Albino da Silva"]},{"cell_type":"markdown","metadata":{"id":"ojyVOubollcH"},"source":["## Definindo os parametros"]},{"cell_type":"code","metadata":{"id":"F-YHxi_AllQZ","executionInfo":{"status":"ok","timestamp":1632356956318,"user_tz":180,"elapsed":7,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["params = {\n","    'vocabulary_size': 10000\n","}"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uhpAkifICdJo"},"source":["# Fixando a seed"]},{"cell_type":"code","metadata":{"id":"1ozXD-xYCcrT","executionInfo":{"status":"ok","timestamp":1632357114702,"user_tz":180,"elapsed":6,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["import random\n","import torch\n","import numpy as np\n","\n","import sys\n","\n","from torch import nn\n","from torch.utils.data import DataLoader, Dataset\n","\n","import torch.nn.functional as F\n","\n","import matplotlib.pyplot as plt\n","import matplotlib.gridspec as gridspec"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wHeZ9nAOEB0U","executionInfo":{"status":"ok","timestamp":1632356961197,"user_tz":180,"elapsed":16,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"1030a14a-028f-45b5-948f-d3c9550926cc"},"source":["random.seed(123)\n","np.random.seed(123)\n","torch.manual_seed(123)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7fdcaf6a2d30>"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"CXFdJz2KVeQw"},"source":["## Preparando Dados"]},{"cell_type":"markdown","metadata":{"id":"gHMi_Kq65fPM"},"source":["Primeiro, fazemos download do dataset:"]},{"cell_type":"code","metadata":{"id":"2wbnfzst5O3k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632356982697,"user_tz":180,"elapsed":21509,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"8ed0ef84-35c8-40c7-eead-a0aa54d65cba"},"source":["!wget -nc http://files.fast.ai/data/aclImdb.tgz \n","!tar -xzf aclImdb.tgz"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-09-23 00:29:21--  http://files.fast.ai/data/aclImdb.tgz\n","Resolving files.fast.ai (files.fast.ai)... 104.26.3.19, 172.67.69.159, 104.26.2.19, ...\n","Connecting to files.fast.ai (files.fast.ai)|104.26.3.19|:80... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://files.fast.ai/data/aclImdb.tgz [following]\n","--2021-09-23 00:29:21--  https://files.fast.ai/data/aclImdb.tgz\n","Connecting to files.fast.ai (files.fast.ai)|104.26.3.19|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 145982645 (139M) [application/x-gtar-compressed]\n","Saving to: ‘aclImdb.tgz’\n","\n","aclImdb.tgz         100%[===================>] 139.22M  40.5MB/s    in 3.6s    \n","\n","2021-09-23 00:29:24 (38.5 MB/s) - ‘aclImdb.tgz’ saved [145982645/145982645]\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"0Giyi5Rv_NIm"},"source":["## Carregando o dataset\n","\n","Criaremos uma divisão de treino (24k exemplos) e validação (1k exemplos) artificialmente.\n","\n","Nota: Evitar de olhar ao máximo o dataset de teste para não ficar enviseado no que será testado. Em aplicações reais, o dataset de teste só estará disponível no futuro, ou seja, é quando o usuário começa a testar o seu produto.\n","\n","Neste exercicio, iremos usar apenas 1000 exemplos de validação e 1000 de teste pois precisamos executar uma inferencia do modelo para cada _palavra_ do dataset.\n","\n","Como o aprendizado é não supervisionado, não iremos utilizar os rótulos."]},{"cell_type":"code","metadata":{"id":"0HIN_xLI_TuT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632356985005,"user_tz":180,"elapsed":2325,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"a34da4ed-d2ce-41b2-b7ff-41f680530a13"},"source":["import os\n","import random\n","\n","\n","max_valid = 1000\n","max_test = 1000\n","\n","\n","def load_texts(folder):\n","    texts = []\n","    for path in os.listdir(folder):\n","        with open(os.path.join(folder, path)) as f:\n","            texts.append(f.read())\n","    return texts\n","\n","x_train_pos = load_texts('aclImdb/train/pos')\n","x_train_neg = load_texts('aclImdb/train/neg')\n","x_test_pos = load_texts('aclImdb/test/pos')\n","x_test_neg = load_texts('aclImdb/test/neg')\n","\n","x_train = x_train_pos + x_train_neg\n","x_test = x_test_pos + x_test_neg\n","y_train = [True] * len(x_train_pos) + [False] * len(x_train_neg)\n","y_test = [True] * len(x_test_pos) + [False] * len(x_test_neg)\n","\n","# Embaralhamos o treino para depois fazermos a divisão treino/valid.\n","c = list(zip(x_train, y_train))\n","random.shuffle(c)\n","x_train, y_train = zip(*c)\n","\n","x_valid = x_train[-max_valid:]\n","y_valid = y_train[-max_valid:]\n","x_train = x_train[:-max_valid]\n","y_train = y_train[:-max_valid]\n","\n","# Embaralhamos o teste para diminuir a chance de algum viés nos 1000 exemplos amostrados.\n","c = list(zip(x_test, x_test))\n","random.shuffle(c)\n","x_test, x_test = zip(*c)\n","x_test = x_test[:max_test]\n","y_test = y_test[:max_test]\n","\n","print(len(x_train), 'amostras de treino.')\n","print(len(x_valid), 'amostras de desenvolvimento.')\n","print(len(x_test), 'amostras de teste.')\n","\n","print('3 primeiras amostras treino:')\n","for x, y in zip(x_train[:3], y_train[:3]):\n","    print(y, x[:100])\n","\n","print('3 últimas amostras treino:')\n","for x, y in zip(x_train[-3:], y_train[-3:]):\n","    print(y, x[:100])\n","\n","print('3 primeiras amostras validação:')\n","for x, y in zip(x_valid[:3], y_test[:3]):\n","    print(y, x[:100])\n","\n","print('3 últimas amostras validação:')\n","for x, y in zip(x_valid[-3:], y_valid[-3:]):\n","    print(y, x[:100])"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["24000 amostras de treino.\n","1000 amostras de desenvolvimento.\n","1000 amostras de teste.\n","3 primeiras amostras treino:\n","False I wholeheartedly disagree with the other viewers of this wretched film. The only reason why I didn't\n","False This film is really terrible. terrible as in it is a waste of 84 minutes of your life. Special effec\n","True I realize that alot of people hate this movie, but i must admit that it is one of my favorites. I ha\n","3 últimas amostras treino:\n","False Yet another forgettable Warners foreign intrigue \"thriller,\" this is rendered even less enjoyable by\n","False Cliché-ridden story of an impending divorce - or is it? - through the eyes of a 6 year-old child. Co\n","False Okay, so the previews to this film only tells you that a rebellious young girl goes to live with her\n","3 primeiras amostras validação:\n","True I do agree that though this story by Melville just might be unfilmable, this isn't even a credible t\n","True Very Slight Spoiler<br /><br /> This movie (despite being only on TV) is absolutely excellent. I did\n","True Hot Millions is a great movie in every way. A fun, offbeat story with wonderful performances by four\n","3 últimas amostras validação:\n","True I grew up with this as my all-time favorite film. The special effects are incredible for the era, an\n","True <br /><br />\"Burning Paradise\" is a combination of neo-Shaw Brothers action and Ringo Lam's urban cy\n","True This film is, quite simply, brilliant. The cinematography is good, the acting superb and the story a\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aiLnZh8fKXvm","executionInfo":{"status":"ok","timestamp":1632356985350,"user_tz":180,"elapsed":356,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"5796f075-57ea-4c36-ede2-58500ee23816"},"source":["print(f'Numero de palavras treino: {sum([len(item.split()) for item in x_train])}')\n","print(f'Numero de palavras validação: {sum([len(item.split()) for item in x_valid])}')\n","print(f'Numero de palavras teste: {sum([len(item.split()) for item in x_test])}')"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Numero de palavras treino: 5611955\n","Numero de palavras validação: 232725\n","Numero de palavras teste: 226558\n"]}]},{"cell_type":"markdown","metadata":{"id":"XLlaPgP0Z_D4"},"source":["# Definindo o vocabulário"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YIpp1C_qZ-QX","executionInfo":{"status":"ok","timestamp":1632356988970,"user_tz":180,"elapsed":3623,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"a149f401-b115-4d53-d6b2-e166fe1f6d43"},"source":["import collections\n","import re\n","\n","\n","def tokenize(text):\n","    return [token.lower() for token in re.compile('\\w+').findall(text)]\n","\n","\n","vocabulary = collections.Counter([token for text in x_train for token in tokenize(text)]).most_common(params['vocabulary_size'])\n","vocabulary = list(dict(vocabulary).keys())\n","print('top 20 tokens do vocabulário:')\n","print('\\n'.join(vocabulary[:20]))\n","\n","vocabulary = {token: i for i, token in enumerate(vocabulary)}"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["top 20 tokens do vocabulário:\n","the\n","and\n","a\n","of\n","to\n","is\n","br\n","it\n","in\n","i\n","this\n","that\n","s\n","was\n","as\n","for\n","with\n","movie\n","but\n","film\n"]}]},{"cell_type":"code","metadata":{"id":"vXj7aLPl_39M","executionInfo":{"status":"ok","timestamp":1632356988971,"user_tz":180,"elapsed":26,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["class Text2Token:\n","    \n","    def __init__(self, vocabulary,context_size=2):\n","        \n","        self.vocabulary = vocabulary\n","        self.vocab_size = len(vocabulary)\n","        self.context_size = context_size\n","        \n","    def defineContext(self, tokens):\n","        \n","        windows = []\n","        \n","        for i in range(self.context_size, len(tokens)-self.context_size):\n","\n","            try:\n","                \n","                context = [self.vocabulary[token] for token in tokens[i-self.context_size:i+self.context_size+1]]\n","                target = context.pop(self.context_size)\n","                \n","                windows.append((torch.tensor(context, dtype=torch.long),torch.tensor(target, dtype=torch.long)))\n","                \n","            except KeyError:\n","                continue\n","                \n","\n","        return windows\n","\n","    def dataset_generator(self, texts):\n","        dataset = []\n","        for text in texts[:]:\n","            tokens = tokenize(text)\n","            dataset.extend(self.defineContext(tokens))\n","        return dataset"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JZzX41tm_7km","executionInfo":{"status":"ok","timestamp":1632356989469,"user_tz":180,"elapsed":522,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"66bc7248-ff29-4855-d7a6-1d15d0b0c506"},"source":["t2t = Text2Token(vocabulary)\n","\n","print(\"Exemplo treino: \\n\")\n","ds_train = t2t.dataset_generator(x_train[:50])\n","ds_train[:5]"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Exemplo treino: \n","\n"]},{"output_type":"execute_result","data":{"text/plain":["[(tensor([3446,   16,   81,  770]), tensor(0)),\n"," (tensor([ 16,   0, 770,   3]), tensor(81)),\n"," (tensor([ 0, 81,  3, 10]), tensor(770)),\n"," (tensor([  81,  770,   10, 5222]), tensor(3)),\n"," (tensor([ 770,    3, 5222,   19]), tensor(10))]"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-mMpB4fu8Ib9","executionInfo":{"status":"ok","timestamp":1632356989470,"user_tz":180,"elapsed":31,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"da840716-66fb-442f-f924-f01451e0119e"},"source":["print(\"Exemplo teste: \\n\")\n","ds_test = t2t.dataset_generator(x_test[:10])\n","ds_test[:5]"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Exemplo teste: \n","\n"]},{"output_type":"execute_result","data":{"text/plain":["[(tensor([  9,  50, 259,  86]), tensor(20)),\n"," (tensor([50, 20, 86, 77]), tensor(259)),\n"," (tensor([ 20, 259,  77,  10]), tensor(86)),\n"," (tensor([259,  86,  10,  19]), tensor(77)),\n"," (tensor([86, 77, 19,  5]), tensor(10))]"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FcXsM9cs8JoO","executionInfo":{"status":"ok","timestamp":1632356989471,"user_tz":180,"elapsed":23,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"3b12d8aa-c3be-405e-cd19-5fd8898f3654"},"source":["print(\"Exemplo validação: \\n\")\n","ds_valid = t2t.dataset_generator(x_valid[:20])\n","ds_valid[:5]"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Exemplo validação: \n","\n"]},{"output_type":"execute_result","data":{"text/plain":["[(tensor([  9,  79,  11, 150]), tensor(1016)),\n"," (tensor([  79, 1016,  150,   10]), tensor(11)),\n"," (tensor([1016,   11,   10,   62]), tensor(150)),\n"," (tensor([ 11, 150,  62,  33]), tensor(10)),\n"," (tensor([ 10, 215,  58,   2]), tensor(20))]"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"OKLuFDhtAMDS","executionInfo":{"status":"ok","timestamp":1632356989471,"user_tz":180,"elapsed":17,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["class CBOW_dataset(Dataset):\n","    def __init__(self, texts, vocabulary):\n","        t2t = Text2Token(vocabulary)\n","        self.dataset = t2t.dataset_generator(texts)\n","\n","    def __len__(self):\n","        return len(self.dataset)\n","\n","    def __getitem__(self, idx):\n","        return self.dataset[idx]\n","\n","def get_dataloader(texts,vocabulary, batch_size):\n","    dataset = CBOW_dataset(texts, vocabulary)\n","    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n","    return dataloader"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NkliXCBkAM6I","executionInfo":{"status":"ok","timestamp":1632356989472,"user_tz":180,"elapsed":17,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"adfeb443-8b9f-4635-c208-65df1e72d0ed"},"source":["class CBOW(nn.Module):\n","    def __init__(self, vocab_size, embedding_dim):\n","        super(CBOW, self).__init__()\n","        self.embeddings = nn.Embedding(vocab_size, embedding_dim)\n","        self.linear = nn.Linear(embedding_dim, vocab_size)\n","\n","    def forward(self, input):\n","        embeds = self.embeddings(input)\n","        embeds_sum = torch.sum(embeds, dim=1)\n","        out = self.linear(embeds_sum)\n","        return out\n","\n","def init_weights(m):\n","    if isinstance(m, nn.Linear):\n","        torch.nn.init.xavier_uniform_(m.weight)\n","\n","cbow = CBOW(len(vocabulary), 128)\n","cbow.apply(init_weights)"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CBOW(\n","  (embeddings): Embedding(10000, 128)\n","  (linear): Linear(in_features=128, out_features=10000, bias=True)\n",")"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rjtKlhJAAPQL","executionInfo":{"status":"ok","timestamp":1632356989800,"user_tz":180,"elapsed":339,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"c6adc313-23df-414e-842d-7bfee034709e"},"source":["rand_input = torch.randint_like(torch.zeros(16,len(vocabulary)), 0 , len(vocabulary), dtype=torch.long)\n","print(rand_input.shape)\n","cbow(rand_input)"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([16, 10000])\n"]},{"output_type":"execute_result","data":{"text/plain":["tensor([[ 1.3369e+01, -2.8115e+00,  3.3993e-01,  ...,  1.7741e+01,\n","         -7.8808e+00,  3.6701e+00],\n","        [-3.1751e+01, -9.4717e+00, -7.9118e+00,  ...,  3.7900e+00,\n","         -4.9706e+01,  2.5731e+01],\n","        [-1.2106e+01, -2.0793e+01,  2.6067e+01,  ...,  2.4457e+01,\n","         -7.4172e+00, -1.3843e+00],\n","        ...,\n","        [-6.2223e+00, -1.9044e+01,  5.9154e+01,  ..., -5.0140e+00,\n","         -2.6273e+01,  1.1505e+01],\n","        [-1.8860e+01, -2.9622e+01,  1.6474e+01,  ...,  2.0007e+01,\n","         -2.3075e+01, -1.4447e+01],\n","        [-2.3641e+01, -1.7471e+01, -5.6608e-02,  ...,  3.6686e+01,\n","         -2.0611e+01,  1.2535e+01]], grad_fn=<AddmmBackward>)"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"FA6gi-zTATGI","executionInfo":{"status":"ok","timestamp":1632356989801,"user_tz":180,"elapsed":6,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["def test(model, dataloader, criterion):\n","\n","    size = len(dataloader.dataset)\n","    num_batches = len(dataloader)\n","    loss = 0\n","    correct = 0.0\n","\n","    for i, data in enumerate(dataloader):\n","\n","        x,y = data\n","        x = x.to(device)\n","        y = y.to(device)\n","\n","        with torch.no_grad():\n","          \n","            logits = model(x)\n","            loss += criterion(logits, y.long()).item()\n","            correct += (logits.argmax(1) == y.long()).type(torch.float).sum().item()\n","\n","    print(f\"\\n===> Loss = {loss/num_batches}, Accurazy = {100*correct/size}\\n\")\n","\n","    perplexity = np.exp(loss/num_batches)\n","    n_bits = np.log2(perplexity)\n","\n","    return perplexity, n_bits, loss/num_batches, correct/size"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"PakrNXTpAUi-","executionInfo":{"status":"ok","timestamp":1632357122779,"user_tz":180,"elapsed":213,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["def train(model, train_dataloader, val_dataloader, epochs, criterion, optimizer, model_name):\n","    losses = []\n","    perplexitys = []\n","    patience = 0\n","    best_loss = 99999999\n","    \n","    for epoch in range(epochs):\n","      \n","        size = len(train_dataloader)\n","        j = 0\n","\n","        for i, data in enumerate(train_dataloader):\n","            x,y = data\n","            x = x.to(device)\n","            y = y.to(device)\n","\n","            logits = model(x)\n","\n","            loss = criterion(logits, y.long())\n","\n","            optimizer.zero_grad()\n","            loss.backward()\n","            optimizer.step()\n","\n","            if i > (((j*size)/10)-10):\n","              print(f'{j*10}% of batch of epoch: {epoch:d}')\n","              j += 1\n","\n","        perplexity, n_bits, val_loss, val_acc = test(model, val_dataloader, criterion)\n","\n","        print(f'\\n===> Epoch = {epoch:d}/{epochs - 1:d}, Valid Loss = {val_loss:.6f}, Valid Acc = {val_acc*100:.1f}%, Perplexidade = {perplexity:.1f}\\n')\n","\n","        losses.append(val_loss)\n","        perplexitys.append(perplexity)\n","\n","\n","        if (round(best_loss,5) > round(val_loss, 5)):\n","            patience = 0\n","            best_loss = val_loss\n","            torch.save(model, f'{model_name}.pth')\n","        else:\n","            patience += 1\n","            if patience > 2:\n","                break\n","\n","    fig, ax = plt.subplots()\n","    gs = gridspec.GridSpec(nrows=1, ncols=2)\n","\n","    ax0 = fig.add_subplot(gs[0, 0])\n","    ax0.plot(losses, label='valid loss')\n","    \n","    ax0.set_xlabel('Epoch')\n","    ax0.set_ylabel('Valid Loss')\n","\n","    ax0.set_title(\"Valid Loss X Epoch\")\n","    ax0.legend()\n","\n","\n","    ax1 = fig.add_subplot(gs[0, 1])\n","    ax1.plot(perplexitys, label='valid perplexity')\n","    \n","    ax1.set_xlabel('Epoch')\n","    ax1.set_ylabel('Valid Perplexity')\n","\n","    ax1.set_title(\"Valid Perplexity X Epoch\")\n","    ax1.legend()\n","\n","    plt.show()\n"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"tWX2atCvAXOe","executionInfo":{"status":"ok","timestamp":1632356998924,"user_tz":180,"elapsed":9127,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","cbow = cbow.to(device)"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"-9Bl49RC8dv0","executionInfo":{"status":"ok","timestamp":1632356998932,"user_tz":180,"elapsed":30,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["learning_rate = 0.001\n","epochs = 10\n","criterion = nn.CrossEntropyLoss()\n","batch_size = 128"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"NI73lj1sAYru","executionInfo":{"status":"ok","timestamp":1632357061072,"user_tz":180,"elapsed":62168,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["dl_train = get_dataloader(x_train,vocabulary,batch_size)\n","dl_valid = get_dataloader(x_valid,vocabulary,batch_size)\n","dl_test  = get_dataloader(x_test,vocabulary,batch_size)"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"HpHPqdQNAZqz","executionInfo":{"status":"ok","timestamp":1632358365672,"user_tz":180,"elapsed":1239629,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"39b1217d-605a-40f6-e73b-5454473fbbb7"},"source":["optimizer = torch.optim.Adam(cbow.parameters(), lr=learning_rate)\n","train(cbow, dl_train, dl_valid, epochs, criterion, optimizer, 'cbow')"],"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["0% of batch of epoch: 0\n","10% of batch of epoch: 0\n","20% of batch of epoch: 0\n","30% of batch of epoch: 0\n","40% of batch of epoch: 0\n","50% of batch of epoch: 0\n","60% of batch of epoch: 0\n","70% of batch of epoch: 0\n","80% of batch of epoch: 0\n","90% of batch of epoch: 0\n","100% of batch of epoch: 0\n","\n","===> Loss = 5.250211601945134, Accurazy = 17.413153786104605\n","\n","\n","===> Epoch = 0/9, Valid Loss = 5.250212, Valid Acc = 17.4%, Perplexidade = 190.6\n","\n","0% of batch of epoch: 1\n","10% of batch of epoch: 1\n","20% of batch of epoch: 1\n","30% of batch of epoch: 1\n","40% of batch of epoch: 1\n","50% of batch of epoch: 1\n","60% of batch of epoch: 1\n","70% of batch of epoch: 1\n","80% of batch of epoch: 1\n","90% of batch of epoch: 1\n","100% of batch of epoch: 1\n","\n","===> Loss = 5.14176103774453, Accurazy = 18.182951687050046\n","\n","\n","===> Epoch = 1/9, Valid Loss = 5.141761, Valid Acc = 18.2%, Perplexidade = 171.0\n","\n","0% of batch of epoch: 2\n","10% of batch of epoch: 2\n","20% of batch of epoch: 2\n","30% of batch of epoch: 2\n","40% of batch of epoch: 2\n","50% of batch of epoch: 2\n","60% of batch of epoch: 2\n","70% of batch of epoch: 2\n","80% of batch of epoch: 2\n","90% of batch of epoch: 2\n","100% of batch of epoch: 2\n","\n","===> Loss = 5.085169509776588, Accurazy = 18.55809263596149\n","\n","\n","===> Epoch = 2/9, Valid Loss = 5.085170, Valid Acc = 18.6%, Perplexidade = 161.6\n","\n","0% of batch of epoch: 3\n","10% of batch of epoch: 3\n","20% of batch of epoch: 3\n","30% of batch of epoch: 3\n","40% of batch of epoch: 3\n","50% of batch of epoch: 3\n","60% of batch of epoch: 3\n","70% of batch of epoch: 3\n","80% of batch of epoch: 3\n","90% of batch of epoch: 3\n","100% of batch of epoch: 3\n","\n","===> Loss = 5.053844284581411, Accurazy = 18.614472200537776\n","\n","\n","===> Epoch = 3/9, Valid Loss = 5.053844, Valid Acc = 18.6%, Perplexidade = 156.6\n","\n","0% of batch of epoch: 4\n","10% of batch of epoch: 4\n","20% of batch of epoch: 4\n","30% of batch of epoch: 4\n","40% of batch of epoch: 4\n","50% of batch of epoch: 4\n","60% of batch of epoch: 4\n","70% of batch of epoch: 4\n","80% of batch of epoch: 4\n","90% of batch of epoch: 4\n","100% of batch of epoch: 4\n","\n","===> Loss = 5.03529919896807, Accurazy = 18.61609853413132\n","\n","\n","===> Epoch = 4/9, Valid Loss = 5.035299, Valid Acc = 18.6%, Perplexidade = 153.7\n","\n","0% of batch of epoch: 5\n","10% of batch of epoch: 5\n","20% of batch of epoch: 5\n","30% of batch of epoch: 5\n","40% of batch of epoch: 5\n","50% of batch of epoch: 5\n","60% of batch of epoch: 5\n","70% of batch of epoch: 5\n","80% of batch of epoch: 5\n","90% of batch of epoch: 5\n","100% of batch of epoch: 5\n","\n","===> Loss = 5.017910283415394, Accurazy = 18.802042674993494\n","\n","\n","===> Epoch = 5/9, Valid Loss = 5.017910, Valid Acc = 18.8%, Perplexidade = 151.1\n","\n","0% of batch of epoch: 6\n","10% of batch of epoch: 6\n","20% of batch of epoch: 6\n","30% of batch of epoch: 6\n","40% of batch of epoch: 6\n","50% of batch of epoch: 6\n","60% of batch of epoch: 6\n","70% of batch of epoch: 6\n","80% of batch of epoch: 6\n","90% of batch of epoch: 6\n","100% of batch of epoch: 6\n","\n","===> Loss = 5.011740368216114, Accurazy = 18.871975019516004\n","\n","\n","===> Epoch = 6/9, Valid Loss = 5.011740, Valid Acc = 18.9%, Perplexidade = 150.2\n","\n","0% of batch of epoch: 7\n","10% of batch of epoch: 7\n","20% of batch of epoch: 7\n","30% of batch of epoch: 7\n","40% of batch of epoch: 7\n","50% of batch of epoch: 7\n","60% of batch of epoch: 7\n","70% of batch of epoch: 7\n","80% of batch of epoch: 7\n","90% of batch of epoch: 7\n","100% of batch of epoch: 7\n","\n","===> Loss = 5.002653173864632, Accurazy = 18.92781247289444\n","\n","\n","===> Epoch = 7/9, Valid Loss = 5.002653, Valid Acc = 18.9%, Perplexidade = 148.8\n","\n","0% of batch of epoch: 8\n","10% of batch of epoch: 8\n","20% of batch of epoch: 8\n","30% of batch of epoch: 8\n","40% of batch of epoch: 8\n","50% of batch of epoch: 8\n","60% of batch of epoch: 8\n","70% of batch of epoch: 8\n","80% of batch of epoch: 8\n","90% of batch of epoch: 8\n","100% of batch of epoch: 8\n","\n","===> Loss = 5.001938675379125, Accurazy = 18.79499522942146\n","\n","\n","===> Epoch = 8/9, Valid Loss = 5.001939, Valid Acc = 18.8%, Perplexidade = 148.7\n","\n","0% of batch of epoch: 9\n","10% of batch of epoch: 9\n","20% of batch of epoch: 9\n","30% of batch of epoch: 9\n","40% of batch of epoch: 9\n","50% of batch of epoch: 9\n","60% of batch of epoch: 9\n","70% of batch of epoch: 9\n","80% of batch of epoch: 9\n","90% of batch of epoch: 9\n","100% of batch of epoch: 9\n","\n","===> Loss = 4.9985482170247835, Accurazy = 18.94299158643421\n","\n","\n","===> Epoch = 9/9, Valid Loss = 4.998548, Valid Acc = 18.9%, Perplexidade = 148.2\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 3 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xWWEdDvuIPx8","executionInfo":{"status":"ok","timestamp":1632358411308,"user_tz":180,"elapsed":2717,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"22a27e29-059b-4849-ac41-c7bfa5239a6b"},"source":["perplexity, n_bits, test_loss, _ = test(cbow, dl_test, criterion)\n","\n","print('Loss:', test_loss, 'Perplexity:', perplexity, 'Número de bits:', n_bits)  "],"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","===> Loss = 5.0136604950178505, Accurazy = 19.05592221098906\n","\n","Loss: 5.0136604950178505 Perplexity: 150.45446721896312 Número de bits: 7.233183132863158\n"]}]}]}