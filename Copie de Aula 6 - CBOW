{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copie de Aula 6 - CBOW","provenance":[{"file_id":"1po6A_2hv_U6NJOTjfMsKi2MDGb2fce4L","timestamp":1632337001826},{"file_id":"1iCUWoyLkNU1-UmsB8YLfLvr3xwI04vIQ","timestamp":1631834127489},{"file_id":"1wpv_r96bBhIHJ3g9q3so3p8sHJ1HDk7H","timestamp":1631553851617},{"file_id":"1YW4O0K7EfSsgUe1kaZR9NswLXKVwqCb-","timestamp":1631389187602},{"file_id":"1Y3rRUiQGW5CEcPRkx_sfZGAEjNwVsw-b","timestamp":1631184728325},{"file_id":"1ONeS-lZ3vVqThueoTvQRMnZ_rJJB1yOl","timestamp":1629906878859}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"1OG5DT_dm6mk"},"source":["# Notebook de referência \n","\n","Nome: Edmar Rodrigues Filho 166690"]},{"cell_type":"markdown","metadata":{"id":"ojyVOubollcH"},"source":["## Definindo os parametros"]},{"cell_type":"code","metadata":{"id":"F-YHxi_AllQZ","executionInfo":{"status":"ok","timestamp":1632337116912,"user_tz":180,"elapsed":991,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["params = {\n","    'vocabulary_size': 10000\n","}"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uhpAkifICdJo"},"source":["# Fixando a seed"]},{"cell_type":"code","metadata":{"id":"1ozXD-xYCcrT","executionInfo":{"status":"ok","timestamp":1632337120271,"user_tz":180,"elapsed":3365,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["import random\n","import torch\n","import numpy as np"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wHeZ9nAOEB0U","executionInfo":{"status":"ok","timestamp":1632337120272,"user_tz":180,"elapsed":44,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"17e9dd9c-6001-49f0-aaaf-b2b6347e53ae"},"source":["random.seed(123)\n","np.random.seed(123)\n","torch.manual_seed(123)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f8955273d70>"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"CXFdJz2KVeQw"},"source":["## Preparando Dados"]},{"cell_type":"markdown","metadata":{"id":"gHMi_Kq65fPM"},"source":["Primeiro, fazemos download do dataset:"]},{"cell_type":"code","metadata":{"id":"2wbnfzst5O3k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632337147524,"user_tz":180,"elapsed":27282,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"1e66e372-62c4-41cf-f0d8-fd523dbdb751"},"source":["!wget -nc http://files.fast.ai/data/aclImdb.tgz \n","!tar -xzf aclImdb.tgz"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-09-22 18:58:39--  http://files.fast.ai/data/aclImdb.tgz\n","Resolving files.fast.ai (files.fast.ai)... 104.26.2.19, 104.26.3.19, 172.67.69.159, ...\n","Connecting to files.fast.ai (files.fast.ai)|104.26.2.19|:80... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://files.fast.ai/data/aclImdb.tgz [following]\n","--2021-09-22 18:58:39--  https://files.fast.ai/data/aclImdb.tgz\n","Connecting to files.fast.ai (files.fast.ai)|104.26.2.19|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 145982645 (139M) [application/x-gtar-compressed]\n","Saving to: ‘aclImdb.tgz’\n","\n","aclImdb.tgz         100%[===================>] 139.22M  12.4MB/s    in 12s     \n","\n","2021-09-22 18:58:51 (11.7 MB/s) - ‘aclImdb.tgz’ saved [145982645/145982645]\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"0Giyi5Rv_NIm"},"source":["## Carregando o dataset\n","\n","Criaremos uma divisão de treino (24k exemplos) e validação (1k exemplos) artificialmente.\n","\n","Nota: Evitar de olhar ao máximo o dataset de teste para não ficar enviseado no que será testado. Em aplicações reais, o dataset de teste só estará disponível no futuro, ou seja, é quando o usuário começa a testar o seu produto.\n","\n","Neste exercicio, iremos usar apenas 1000 exemplos de validação e 1000 de teste pois precisamos executar uma inferencia do modelo para cada _palavra_ do dataset.\n","\n","Como o aprendizado é não supervisionado, não iremos utilizar os rótulos."]},{"cell_type":"code","metadata":{"id":"0HIN_xLI_TuT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632337149780,"user_tz":180,"elapsed":2285,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"986b120f-faed-4eef-b5fa-3103c5fe2a42"},"source":["import os\n","import random\n","\n","\n","max_valid = 1000\n","max_test = 1000\n","\n","\n","def load_texts(folder):\n","    texts = []\n","    for path in os.listdir(folder):\n","        with open(os.path.join(folder, path)) as f:\n","            texts.append(f.read())\n","    return texts\n","\n","x_train_pos = load_texts('aclImdb/train/pos')\n","x_train_neg = load_texts('aclImdb/train/neg')\n","x_test_pos = load_texts('aclImdb/test/pos')\n","x_test_neg = load_texts('aclImdb/test/neg')\n","\n","x_train = x_train_pos + x_train_neg\n","x_test = x_test_pos + x_test_neg\n","y_train = [True] * len(x_train_pos) + [False] * len(x_train_neg)\n","y_test = [True] * len(x_test_pos) + [False] * len(x_test_neg)\n","\n","# Embaralhamos o treino para depois fazermos a divisão treino/valid.\n","c = list(zip(x_train, y_train))\n","random.shuffle(c)\n","x_train, y_train = zip(*c)\n","\n","x_valid = x_train[-max_valid:]\n","y_valid = y_train[-max_valid:]\n","x_train = x_train[:-max_valid]\n","y_train = y_train[:-max_valid]\n","\n","# Embaralhamos o teste para diminuir a chance de algum viés nos 1000 exemplos amostrados.\n","c = list(zip(x_test, x_test))\n","random.shuffle(c)\n","x_test, x_test = zip(*c)\n","x_test = x_test[:max_test]\n","y_test = y_test[:max_test]\n","\n","print(len(x_train), 'amostras de treino.')\n","print(len(x_valid), 'amostras de desenvolvimento.')\n","print(len(x_test), 'amostras de teste.')\n","\n","print('3 primeiras amostras treino:')\n","for x, y in zip(x_train[:3], y_train[:3]):\n","    print(y, x[:100])\n","\n","print('3 últimas amostras treino:')\n","for x, y in zip(x_train[-3:], y_train[-3:]):\n","    print(y, x[:100])\n","\n","print('3 primeiras amostras validação:')\n","for x, y in zip(x_valid[:3], y_test[:3]):\n","    print(y, x[:100])\n","\n","print('3 últimas amostras validação:')\n","for x, y in zip(x_valid[-3:], y_valid[-3:]):\n","    print(y, x[:100])"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["24000 amostras de treino.\n","1000 amostras de desenvolvimento.\n","1000 amostras de teste.\n","3 primeiras amostras treino:\n","False I wholeheartedly disagree with the other viewers of this wretched film. The only reason why I didn't\n","False This film is really terrible. terrible as in it is a waste of 84 minutes of your life. Special effec\n","True I realize that alot of people hate this movie, but i must admit that it is one of my favorites. I ha\n","3 últimas amostras treino:\n","False Yet another forgettable Warners foreign intrigue \"thriller,\" this is rendered even less enjoyable by\n","False Cliché-ridden story of an impending divorce - or is it? - through the eyes of a 6 year-old child. Co\n","False Okay, so the previews to this film only tells you that a rebellious young girl goes to live with her\n","3 primeiras amostras validação:\n","True I do agree that though this story by Melville just might be unfilmable, this isn't even a credible t\n","True Very Slight Spoiler<br /><br /> This movie (despite being only on TV) is absolutely excellent. I did\n","True Hot Millions is a great movie in every way. A fun, offbeat story with wonderful performances by four\n","3 últimas amostras validação:\n","True I grew up with this as my all-time favorite film. The special effects are incredible for the era, an\n","True <br /><br />\"Burning Paradise\" is a combination of neo-Shaw Brothers action and Ringo Lam's urban cy\n","True This film is, quite simply, brilliant. The cinematography is good, the acting superb and the story a\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aiLnZh8fKXvm","executionInfo":{"status":"ok","timestamp":1632337149781,"user_tz":180,"elapsed":17,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"29b24e16-7aa6-4346-992f-a4c6bfefdc14"},"source":["print(f'Numero de palavras treino: {sum([len(item.split()) for item in x_train])}')\n","print(f'Numero de palavras validação: {sum([len(item.split()) for item in x_valid])}')\n","print(f'Numero de palavras teste: {sum([len(item.split()) for item in x_test])}')"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Numero de palavras treino: 5611955\n","Numero de palavras validação: 232725\n","Numero de palavras teste: 226558\n"]}]},{"cell_type":"markdown","metadata":{"id":"XLlaPgP0Z_D4"},"source":["# Definindo o vocabulário"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YIpp1C_qZ-QX","executionInfo":{"status":"ok","timestamp":1632337153512,"user_tz":180,"elapsed":3740,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"13207bf7-c33f-42fa-c26d-0fc635d52e87"},"source":["import collections\n","import re\n","\n","\n","def tokenize(text):\n","    return [token.lower() for token in re.compile('\\w+').findall(text)]\n","\n","\n","vocabulary = collections.Counter([token for text in x_train for token in tokenize(text)]).most_common(params['vocabulary_size'])\n","vocabulary = list(dict(vocabulary).keys())\n","print('top 20 tokens do vocabulário:')\n","print('\\n'.join(vocabulary[:20]))\n","\n","vocabulary = {token: i for i, token in enumerate(vocabulary)}"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["top 20 tokens do vocabulário:\n","the\n","and\n","a\n","of\n","to\n","is\n","br\n","it\n","in\n","i\n","this\n","that\n","s\n","was\n","as\n","for\n","with\n","movie\n","but\n","film\n"]}]},{"cell_type":"markdown","metadata":{"id":"gNvmqtWTGhne"},"source":["# Gerando o dataset"]},{"cell_type":"markdown","metadata":{"id":"sLFQhoYsGpZZ"},"source":["## Função que gera o dataset"]},{"cell_type":"code","metadata":{"id":"oGH9ot2RaAAm","executionInfo":{"status":"ok","timestamp":1632337153513,"user_tz":180,"elapsed":18,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["def get_window(tokens, context_size, vocabulary):\n","  windows = []\n","  for i in range(context_size, len(tokens)-context_size):\n","    try:\n","      tokens_idx = [vocabulary[token] for token in tokens[i-context_size:i+context_size+1]]\n","      center_token = tokens_idx.pop(context_size)\n","      windows.append(\n","          (\n","            torch.tensor(tokens_idx, dtype=torch.long),\n","            torch.tensor(center_token, dtype=torch.long)\n","          )\n","      )\n","    except KeyError:\n","      continue\n","\n","  return windows"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"Hiis1Jr25vQn","executionInfo":{"status":"ok","timestamp":1632337153514,"user_tz":180,"elapsed":17,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["idx_to_word = {v:k for k,v in vocabulary.items()}\n","\n","def create_dataset(texts, vocabulary):\n","  \"\"\"\n","    Cria o dataset para sgram a partir de textos e um vocabulário pré-definido.\n","    Amostras contendo tokens não encontrados no vocabulário são ignorados.\n","    Amostras incompletas (sem 2 palavras antes e depois) são ignorados.\n","  \"\"\"\n","  dataset = []\n","  for text in texts[:]:\n","    tokens = tokenize(text)\n","    dataset.extend(get_window(tokens, 2, vocabulary))\n","  return dataset\n","\n","testing_size = 100\n","dataset = create_dataset(x_train[:testing_size], vocabulary)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VMfxZYZMK9Cv","executionInfo":{"status":"ok","timestamp":1632337154038,"user_tz":180,"elapsed":539,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"c604af35-c64d-4596-dddb-302c6a01e063"},"source":["dataset[:5]"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(tensor([3446,   16,   81,  770]), tensor(0)),\n"," (tensor([ 16,   0, 770,   3]), tensor(81)),\n"," (tensor([ 0, 81,  3, 10]), tensor(770)),\n"," (tensor([  81,  770,   10, 5222]), tensor(3)),\n"," (tensor([ 770,    3, 5222,   19]), tensor(10))]"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":137},"id":"cQA1oaRCLUkX","executionInfo":{"status":"ok","timestamp":1632337154039,"user_tz":180,"elapsed":75,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"73e9aa8a-7990-4985-d5f9-6561f6a2868d"},"source":["x_train[0]"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"I wholeheartedly disagree with the other viewers of this wretched film. The only reason why I didn't rate it 1 for awful was due to the great talent of Carmen Miranda. The beginning and end are the best parents due to her gifted singing and dancing.<br /><br />The problem is with the rest of the picture. Alice Faye comes off quite hollow. Don Ameche has a great singing voice but with the wretched writing material, he comes off so terribly corny.<br /><br />The plot is a real stiff here with Ameche assuming two parts as a song and dance man and a baron not happily married to Faye.<br /><br />It seems that by playing the song and dance man, Ameche's marriage gets a second change to reignite. Some silly nonsense about the baron having to clear up business and being away allows him to play both parts.<br /><br />S.Z. Sakal is given little to do here and so his comedic gifts are not given the opportunity to shine. Ditto for J. Carrol Naish who actually appears uncomfortable in his role.<br /><br />This is a chica chica boom bomb of a film.\""]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gWCAgMwY8EKe","executionInfo":{"status":"ok","timestamp":1632337154040,"user_tz":180,"elapsed":61,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"7f3fe0af-8c53-4876-fa33-0104c7ad98f3"},"source":["print([idx_to_word[i.item()] for i in dataset[:5][0][0]])\n","print([idx_to_word[i.item()] for i in dataset[:5][1][0]])"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["['disagree', 'with', 'other', 'viewers']\n","['with', 'the', 'viewers', 'of']\n"]}]},{"cell_type":"markdown","metadata":{"id":"nEm8ZsNGGx9d"},"source":["## Comparação do tamanho em bytes"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uVhL4_Th8tn2","executionInfo":{"status":"ok","timestamp":1632337154041,"user_tz":180,"elapsed":56,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"444d3a97-2473-4bfd-8249-5d5a8b412af6"},"source":["import sys\n","\n","original_size = 0\n","for text in x_train[:testing_size]:\n","  original_size += sys.getsizeof(text)\n","\n","transformed_size = sys.getsizeof(dataset)\n","\n","print(f\"Size of first {testing_size} original string dataset:{original_size} bytes\")\n","print(f\"Size of SkipGram string idx dataset:{transformed_size} bytes\")\n","print(f'Total increase: {transformed_size/original_size}')"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Size of first 100 original string dataset:128413 bytes\n","Size of SkipGram string idx dataset:150168 bytes\n","Total increase: 1.1694143116351148\n"]}]},{"cell_type":"markdown","metadata":{"id":"exSsMczoG4w4"},"source":["## Configuração do Dataset + DataLoader"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BlmQDFlu5SZ3","executionInfo":{"status":"ok","timestamp":1632337154042,"user_tz":180,"elapsed":54,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"dbb744e4-e860-4d7c-e6fe-ed76f4ce1477"},"source":["from torch import nn\n","from torch.utils.data import DataLoader, Dataset\n","\n","class IMDB(Dataset):\n","  def __init__(self, texts, vocabulary):\n","    self.dataset = create_dataset(texts, vocabulary)\n","\n","  def __len__(self):\n","    return len(self.dataset)\n","\n","  def __getitem__(self, idx):\n","    return self.dataset[idx]\n","\n","def get_dataloader(texts,vocabulary, batch_size):\n","  dataset = IMDB(texts, vocabulary)\n","  dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n","  return dataloader\n","\n","train_dataloader = get_dataloader(x_train[:10],vocabulary, 16)\n","next(iter(train_dataloader))"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[tensor([[2368, 2093,    2,  183],\n","         [ 325,  155,    3,  914],\n","         [  42,  558, 1209,   31],\n","         [4569, 3023,  289,  748],\n","         [ 200,    0, 1080,   15],\n","         [  39, 3167, 7986,   88],\n","         [3023,    0,  748,    3],\n","         [   7,   12,  824,  355],\n","         [1209,   31, 1287,    1],\n","         [4657,    4,  164,   18],\n","         [   6,    9,  228,   11],\n","         [5899, 1309,   14,    8],\n","         [   9,  206,   11,    7],\n","         [ 942,  878,    2,  564],\n","         [   5,   47,   53,   21],\n","         [ 132,   43,   19, 1097]]),\n"," tensor([   3,   30,  128,    0,  895,    0,  289, 1528,    0,   28,   80,  117,\n","          955,    4,  572,   10])]"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"DTJb2bu6G_ZK"},"source":["# Criação da rede"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9vpAplXpCp67","executionInfo":{"status":"ok","timestamp":1632337154043,"user_tz":180,"elapsed":51,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"3cff4b85-ea67-4dab-8b84-c217f740e997"},"source":["import torch.nn.functional as F\n","\n","class CBOW(nn.Module):\n","  def __init__(self, vocab_size, embedding_dim):\n","    super(CBOW, self).__init__()\n","    self.embeddings = nn.Embedding(vocab_size, embedding_dim)\n","    self.linear = nn.Linear(embedding_dim, vocab_size)\n","\n","  def forward(self, input):\n","    embeds = self.embeddings(input)\n","    embeds_sum = torch.sum(embeds, dim=1)\n","    out = self.linear(embeds_sum)\n","    return out\n","\n","def init_weights(m):\n","  if isinstance(m, nn.Linear):\n","      torch.nn.init.xavier_uniform_(m.weight)\n","\n","cbow = CBOW(len(vocabulary), 128)\n","cbow.apply(init_weights)"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CBOW(\n","  (embeddings): Embedding(10000, 128)\n","  (linear): Linear(in_features=128, out_features=10000, bias=True)\n",")"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p97SzrFzIK8I","executionInfo":{"status":"ok","timestamp":1632337154045,"user_tz":180,"elapsed":47,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"90ba62c0-8962-4da1-e26f-9c4457e9e9c7"},"source":["rand_input = torch.randint_like(torch.zeros(16,len(vocabulary)), 0 , len(vocabulary), dtype=torch.long)\n","print(rand_input.shape)\n","cbow(rand_input)"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([16, 10000])\n"]},{"output_type":"execute_result","data":{"text/plain":["tensor([[ 36.2942,  -4.2471,  12.5635,  ...,  -1.1213, -10.4652,  -1.9586],\n","        [ -7.0216,  13.8266, -31.7968,  ...,  10.5698, -26.6446,   7.6846],\n","        [ -7.1981,  10.2802,  10.1446,  ...,  18.0423, -44.1712,  -0.9568],\n","        ...,\n","        [  2.3946,   7.3610,  18.6946,  ..., -20.5622, -23.8121,  12.0330],\n","        [ 24.8787,   8.6101,   0.2674,  ...,   1.7822, -17.1670, -18.3097],\n","        [  0.6920, -12.3042,  11.9445,  ..., -18.9848, -16.2815,   1.1546]],\n","       grad_fn=<AddmmBackward>)"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"2NEC0_ylHFbt"},"source":["# Configurações globais"]},{"cell_type":"code","metadata":{"id":"3Y6j_NxyKey2","executionInfo":{"status":"ok","timestamp":1632337154046,"user_tz":180,"elapsed":41,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["learning_rate = 0.001\n","epochs = 100\n","criterion = nn.CrossEntropyLoss()\n","batch_size = 64\n","\n","params = {\"learning_rate\": learning_rate,\n","          \"optimizer\": \"Adam\",\n","          \"batch_size\":batch_size}\n","\n","#optimizer = torch.optim.Adam(cbow.parameters(), lr=learning_rate)"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"U3NcwTpVHN0Y"},"source":["## Funções de treino e teste"]},{"cell_type":"code","metadata":{"id":"5YjM9uUgKhMu","executionInfo":{"status":"ok","timestamp":1632337154048,"user_tz":180,"elapsed":41,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["def test(model, dataloader, criterion):\n","  size = len(dataloader.dataset)\n","  num_batches = len(dataloader)\n","  loss = 0\n","  correct = 0.0\n","  for i, data in enumerate(dataloader):\n","    x,y = data\n","    x = x.to(device)\n","    y = y.to(device)\n","    with torch.no_grad():\n","      logits = model(x)\n","      loss += criterion(logits, y.long()).item()\n","      correct += (logits.argmax(1) == y.long()).type(torch.float).sum().item()\n","  print(f\"Loss: {loss/num_batches}, Acc: {100*correct/size}\")\n","  return loss/num_batches, correct/size\n","\n","# test(model, val_dataloader, criterion)"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"YOZWKicXKijl","executionInfo":{"status":"ok","timestamp":1632337370597,"user_tz":180,"elapsed":351,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["import matplotlib.pyplot as plt\n","\n","def train(model, train_dataloader, val_dataloader, epochs, criterion, optimizer, model_name):\n","  losses = []\n","  patience = 0\n","  best_loss = 1e10\n","  for epoch in range(epochs):\n","    print(f\"Epoch: {epoch}\")\n","    size = len(train_dataloader)\n","    for i, data in enumerate(train_dataloader):\n","      x,y = data\n","      x = x.to(device)\n","      y = y.to(device)\n","\n","      logits = model(x)\n","\n","      loss = criterion(logits, y.long())\n","\n","      optimizer.zero_grad()\n","      loss.backward()\n","      optimizer.step()\n","      '''\n","      if i % 5000 == 0:\n","        run[\"train/loss\"].log(loss)\n","      '''\n","      if i % 10000 == 0:\n","        print(f\"Batch: {i}/{size}\")\n","\n","    val_loss, val_acc = test(model, val_dataloader, criterion)\n","    '''\n","    run[\"val/loss\"].log(val_loss)\n","    run[\"val/accuracy\"].log(val_acc)\n","    '''   \n","    losses.append(val_loss)\n","    plt.plot(losses)\n","    if (round(best_loss,5) > round(val_loss, 5)):\n","      patience = 0\n","      best_loss = val_loss\n","      torch.save(model, f'{model_name}.pth')\n","    else:\n","      patience += 1\n","      if patience > 2:\n","        break\n","\n","# train(model, train_dataloader, val_dataloader, 1, criterion, optimizer)"],"execution_count":24,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HSl8ggC6HUQE"},"source":["# Gerando datasets + treino do modelo com logging"]},{"cell_type":"code","metadata":{"id":"gmfZiT0uKkTe","executionInfo":{"status":"ok","timestamp":1632337163226,"user_tz":180,"elapsed":8765,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","cbow = cbow.to(device)"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"FPUH5_F0KmJe","executionInfo":{"status":"ok","timestamp":1632337223738,"user_tz":180,"elapsed":60534,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["train_dataloader = get_dataloader(x_train,vocabulary,batch_size)\n","val_dataloader = get_dataloader(x_valid,vocabulary,batch_size)\n","test_dataloader = get_dataloader(x_test,vocabulary,batch_size)"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"dWkspU6WKzJ3","executionInfo":{"status":"error","timestamp":1632338626769,"user_tz":180,"elapsed":1251971,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"019ff804-865f-4e2a-ec74-78041663e982"},"source":["'''\n","run = neptune.init(\n","    project=\"e166690/cbow\",\n","    api_token=\"eyJhcGlfYWRkcmVzcyI6Imh0dHBzOi8vYXBwLm5lcHR1bmUuYWkiLCJhcGlfdXJsIjoiaHR0cHM6Ly9hcHAubmVwdHVuZS5haSIsImFwaV9rZXkiOiIyNDBmMThjNi1kODM2LTQzYTItYTgzMi01YTczMjI3NjhjYTUifQ==\",\n",") \n","params.update({'model':'cbow'})\n","run[\"parameters\"] = params\n","'''\n","\n","optimizer = torch.optim.Adam(cbow.parameters(), lr=learning_rate)\n","train(cbow, train_dataloader, val_dataloader, epochs, criterion, optimizer, 'cbow')\n","# run.stop()"],"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0\n","Batch: 0/70043\n","Batch: 10000/70043\n","Batch: 20000/70043\n","Batch: 30000/70043\n","Batch: 40000/70043\n","Batch: 50000/70043\n","Batch: 60000/70043\n","Batch: 70000/70043\n","Loss: 5.294424219673969, Acc: 17.34701621996704\n","Epoch: 1\n","Batch: 0/70043\n","Batch: 10000/70043\n","Batch: 20000/70043\n","Batch: 30000/70043\n","Batch: 40000/70043\n","Batch: 50000/70043\n","Batch: 60000/70043\n","Batch: 70000/70043\n","Loss: 5.1700687125619815, Acc: 18.085371671437244\n","Epoch: 2\n","Batch: 0/70043\n","Batch: 10000/70043\n","Batch: 20000/70043\n","Batch: 30000/70043\n","Batch: 40000/70043\n","Batch: 50000/70043\n","Batch: 60000/70043\n","Batch: 70000/70043\n","Loss: 5.11145824621917, Acc: 18.367269494318673\n","Epoch: 3\n","Batch: 0/70043\n","Batch: 10000/70043\n","Batch: 20000/70043\n","Batch: 30000/70043\n","Batch: 40000/70043\n","Batch: 50000/70043\n","Batch: 60000/70043\n","Batch: 70000/70043\n","Loss: 5.071793925708422, Acc: 18.57218752710556\n","Epoch: 4\n","Batch: 0/70043\n","Batch: 10000/70043\n","Batch: 20000/70043\n","Batch: 30000/70043\n","Batch: 40000/70043\n","Batch: 50000/70043\n","Batch: 60000/70043\n","Batch: 70000/70043\n","Loss: 5.058068811252553, Acc: 18.58140341746899\n","Epoch: 5\n","Batch: 0/70043\n","Batch: 10000/70043\n","Batch: 20000/70043\n","Batch: 30000/70043\n","Batch: 40000/70043\n","Batch: 50000/70043\n","Batch: 60000/70043\n","Batch: 70000/70043\n","Loss: 5.053252765547679, Acc: 18.530444964871194\n","Epoch: 6\n","Batch: 0/70043\n","Batch: 10000/70043\n","Batch: 20000/70043\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-4be0ca6c7d11>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcbow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlearning_rate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcbow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_dataloader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_dataloader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'cbow'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;31m# run.stop()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-24-2140edd98285>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(model, train_dataloader, val_dataloader, epochs, criterion, optimizer, model_name)\u001b[0m\n\u001b[1;32m     19\u001b[0m       \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m       \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m       \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m       '''\n\u001b[1;32m     23\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m5000\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/optim/optimizer.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     86\u001b[0m                 \u001b[0mprofile_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Optimizer.step#{}.step\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprofiler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecord_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprofile_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/autograd/grad_mode.py\u001b[0m in \u001b[0;36mdecorate_context\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/optim/adam.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, closure)\u001b[0m\n\u001b[1;32m    116\u001b[0m                    \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'lr'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m                    \u001b[0mweight_decay\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'weight_decay'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m                    eps=group['eps'])\n\u001b[0m\u001b[1;32m    119\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/optim/_functional.py\u001b[0m in \u001b[0;36madam\u001b[0;34m(params, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, amsgrad, beta1, beta2, lr, weight_decay, eps)\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m         \u001b[0;31m# Decay the first and second moment running average coefficient\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 86\u001b[0;31m         \u001b[0mexp_avg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmul_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbeta1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mbeta1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     87\u001b[0m         \u001b[0mexp_avg_sq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmul_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbeta2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maddcmul_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mbeta2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mamsgrad\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"WapBeFHkHZjW"},"source":["# Teste do modelo com perplexidade"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QoHlKbx7z6r8","executionInfo":{"status":"ok","timestamp":1632338636873,"user_tz":180,"elapsed":3567,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}},"outputId":"2404e685-200b-497b-a292-c4d4b4a0c46a"},"source":["test_loss, _ = test(cbow, test_dataloader, criterion)\n","perplexity  = np.exp(test_loss)\n","n_bits = np.log2(perplexity)\n","print('Loss:', test_loss, 'Perplexity:', perplexity, 'Número de bits:', n_bits)  "],"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Loss: 5.08038568028877, Acc: 18.80658389467586\n","Loss: 5.08038568028877 Perplexity: 160.8360752719749 Número de bits: 7.329447226755911\n"]}]},{"cell_type":"markdown","metadata":{"id":"R6ZxoYiSHdMg"},"source":["# Uso dos embedding para achar palavras mais parecidas"]},{"cell_type":"code","metadata":{"id":"xFWQn7jnbJRn","executionInfo":{"status":"aborted","timestamp":1632337224696,"user_tz":180,"elapsed":471,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["emb_weights = cbow.embeddings.weight"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y37Pkd9BclEs","executionInfo":{"status":"aborted","timestamp":1632337224703,"user_tz":180,"elapsed":477,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["def get_closest_n(word_vector, n, idx_to_word):\n","  \"\"\"\n","    Recupera as N palavras mais próximas do vetor da palavra passado usando similaridade de cosseno.\n","  \"\"\"\n","  best_fit = [(0,-1)]\n","  for i in range(emb_weights.shape[0]):\n","    sim = torch.cosine_similarity(word_vector, emb_weights[i], dim=0).item()\n","    if len(best_fit) < n:\n","      best_fit.append((i, sim))\n","    else:\n","      # get worst in list\n","      for i_list, tup in enumerate(best_fit):\n","        idx, eval_sim = tup\n","        if i_list == 0:\n","          worst = eval_sim\n","          worst_idx = 0\n","\n","        if worst > eval_sim:\n","          worst = eval_sim\n","          worst_idx = i_list\n","\n","      #compare current with worst\n","      if sim > worst:\n","        best_fit.pop(worst_idx)\n","\n","        best_fit.append((i, sim))\n","\n","  return {idx_to_word[vocab_idx]:sim for vocab_idx, sim in best_fit}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9ur9DKiEF9ra","executionInfo":{"status":"aborted","timestamp":1632337224705,"user_tz":180,"elapsed":479,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["possib_queen = emb_weights[vocabulary['king']] - emb_weights[vocabulary['man']] + emb_weights[vocabulary['woman']]\n","sorted(get_closest_n(possib_queen, 10, idx_to_word).items(), key=lambda item: item[1], reverse=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JJWDAW9AFu_q","executionInfo":{"status":"aborted","timestamp":1632337224710,"user_tz":180,"elapsed":482,"user":{"displayName":"Guilherme Pereira Albino da Silva","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07971392613373651702"}}},"source":["possib_worst = emb_weights[vocabulary['best']] - emb_weights[vocabulary['good']] + emb_weights[vocabulary['bad']]\n","sorted(get_closest_n(possib_worst, 10, idx_to_word).items(), key=lambda item: item[1], reverse=True)"],"execution_count":null,"outputs":[]}]}